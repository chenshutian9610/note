* Hibernate 中所有的一切 DML 操作都是基于事务的，在非事务状态下只能进行查询

* Spring 为 Hibernate 提供了 HibernateTemplate 来代替 Session，但该对象没有创建和提交事务的能力，单独使用时只能用于查询
  但是有一个问题：该对象在非事务状态下，每次使用查询方法时就开启 session，结束时就关闭，所以
	* 不能用于含延迟加载的查询；
	* 一级缓存相当于没用；
  PS：关于延迟加载查询的问题，在 WEB 模式下可以在 web.xml 中配置 OpenSessionInViewFilter 过滤器解决，
	  但不利于高并发，所以在 WEB 模式下要慎重使用延迟加载功能（要时刻记得，在事务以外不能使用延迟加载）
			
* HibernateTemplate 方法
	操作持久化对象：	get / save / update / saveOrUpdate
	hql 查询与操作：	find / bulkUpdate（使用 hql 进行 DML 操作时使用）
	
* HibernateTemplate 可以使用 execute 和 HibernateCallback<> 接口来使用原 API（Session），
	回调接口含有一个 doInHibernate 方法，在里面可以使用 Session 
		template.execute(new HibernateCallback<Object>() {
      public Object doInHibernate(Session session) throws HibernateException {
        session.close();
        return null;
			}});
	看着很复杂，其实在 IDE 中会自动生成代码，只需要写 doInHibernate 中写业务代码就可以了

* hql 的使用
  <p>
	使用 hql 需要注意几个问题：
	1.hql 语法和 sql 相似，但它是面向对象
	2.hql 语法很严格，建议给每一个类设置别名，否则在一些看起来不会出错的地方会出错
	3.优化查询
			使用 from User where id=1 返回的是一个 User 对象，会存储在 session 缓存中
			使用 select id, name, pwd from User where id=1 返回的是一个 Object[] 对象，不会缓存在 session 缓存中
	* 查询少量数据时，第一种方法很灵活，因为有 session 缓存
		查询大量数据时，第一种方法会造成内存占用过大，并且因为 session 缓存会不时同步数据库数据，负担很大
		根据情况使用不同的查询方法可以优化速度
	* hibernate+spring，一般使用 JdbcTemplate 来进行查询操作
		hibernate 的事务管理器扩展了 DataSourceTransactionManager，所以 JdbcTemplate 也可以使用该事务管理器，
		但建议不要，因为 JdbcTemplate 访问不了 session 缓存
  </p>
  <hql&sql>	查询有多少人重名了
	<h> select name, count(user) from User user group by name having count(users)>1;
	<s> select name, count(*) from tb_user group by name having count(*)>1;
  </hql&sql>
  <hql&sql> hql 的 from 查询 （特色）					//	直接使用 from 查询的对象都会放进 session 缓存
	<h> from User order by name asc;
	<s> select * from tb_user order by name asc;
  </hql&sql>
  <hql&sql> hql 的 inner join （特色）
	<h> from Customer c inner join c.orders;	//	返回 List<Object[]> 类型，第一个 Object 是 Customer，第二个是 Order
	<s> select * from tb_customer c inner join tb_order o on c.id=o.c_id;
  </hql&sql>