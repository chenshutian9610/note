#!指定运行环境，不使用则默认当前运行环境（例如 #!/bin/bash）
# 表示注释
. 和 source 可以将其他 shell 脚本连接起来（例如 . .bashrc），被连接的shell脚本可以不具有运行权限
chmod +x 使脚本拥有执行权限
运行的时候如果在该脚本在当前文件，要加上./，这样系统才知道要在当前目录查找脚本，不然会到 $PATH 中查找
bash 调试脚本
  -v　查看所有代码与执行过程
  -x 查看和执行有关的代码（代码前面有个＋号）与执行过程
bash < 脚本，通过输入重定向将脚本传送到bash中执行
shell 有三种变量
* 用户变量
* 环境变量，可以认为是一种全局变量
* 内部变量
    $#（参数个数）
    $?（上一命令的返回值）
    $*（列出所有参数，所有参数为一个整体）
    $@（列出所有参数,当有双引号时，参数是分开的）
    $n（位置参数，$0表示脚本名，$3表示第三个参数，${11}表示第十一个）
    $$（进程ID）
shell 使用空格代替逗号
变量只有在被使用时要加上 $，被处理时不能加，例如 str="hello" 和 echo $str
$str 的全称是 ${str}，花括号是可选的，但是如果当语义会被混淆的时候要用到，例如 ${str}happy
只读变量使用 readonly，删除变量使用 unset，例如 readonly str 和 unset str
声明临时的环境变量，export
使用 set 给全部位置参数重新赋值，注意，是全部，例如 set a b c，不管位置参数有没有，它都只会只有三个参数
echo　输出字符串，-n 输出是后不回车
printf 和 Ｃ 语言格式类似，例如 printf "%d,%s,%c\n" 33 "abc" $char
read 变量，从键盘为变量赋值，-p 提示（显示提示），-n　数字（规定字符不能超过制定数值）
变量的替换：
* ${var:+word}　如果var被赋值，则返回word 
* ${var:-word} 如果var未被赋值，则返回word
* ${var:=word}　如果var未被赋值，则var等于word，并返回
* ${var:?message}　如果var未被赋值，则将message发送到标准错误输出，并结束脚本运行
数组：
* say=(h e l l o w o r l d)
* ${say[3]}　使用的时候需要加上花括号，返回第四个元素的值
* ${say[*]}　返回所有元素的值
* ${#say[*]}　返回元素的个数
* ${#say[n]}　返回say[n]的值的长度
数值计算
* let var=1+5 
* var=$[1+5]
* var=`expr 1 \* 5` 加号与数字之间要有空格，*是特殊符号，需要用转义字符
逻辑计算
* test 逻辑表达式
* [　逻辑表达式　]　逻辑表达式与方括号之间有空格
整数关系运算符
* -eq 等于
* -ne　不等于
* -gt　大于
* -lt　小于
* -ge　大于或等于
* -le　小于或等于
* 例如 if [ $a -lt $b ];
字符串检测运算符
* = 　等于
* !=　不等于
* -z　　是否为零
* -n　　是否不为零
* str　直接检测字符串，空为false
* 例如：if [ $str ];
文件测试运算符
* -b  是否为块文件
* -c　是否为字符文件
* -d　是否为目录文件
* -f　是否为普通文件
* -r　是否可读
* -w　是否可写
* -x　是否可执行
* -e　是否存在
* -s　是否为空
* 例如：if [ -r $file ];
布尔运算符
* -a 与
* -o　或
* !　非
* 例如：if [ $a -lt $b -a $a -eq $c ]
条件语句
* if [ 逻辑表达式 ];    //  分号必须有，中括号的两边要留有空格
  then
　   命令
  fi

* if [ 逻辑表达式 ];
  then
    命令
  else
    命令
  fi

* if [ 逻辑表达式 ];
  then
    命令
  elif [ 逻辑表达式 ]
  then
    命令
  ...
  else
  fi
 
* case 值　in
  模式1）
    命令
　　　　;;
　模式2|模式3） //  可以用“|”隔开表示“或”
    命令　　
    ;;     // 相当于break
  ×）      // 相当于default
    命令
　　　　;;
  esac
循环语句
* while [ 逻辑表达式 ] 
  do 
    命令
  done

* until [ 逻辑表达式 ] // 和while相反，在达到条件之间一直循环
  do
    命令
  done

* for var [in 列表]   // 如果不加in，则从位置参数获取
　　do
    命令
　　done

* break [n]          // 跳出几重循环，break 2  
* continue [n]   
函数
* function_name(){
  　命令
　　[return var]
  }                  // 调用时不用加括号，function_name 1 2 3
* shell与C的函数不一样，函数内的变量与函数外的变量是同步的，没有形参与实参的分别
* $() 里面的是命令，如 $(echo 'hello')
  $[] 里面的是算数运算，如 $[2*5] 就是 10
  $?  表示上一命令的返回值，执行函数之后得到的是函数的返回值，执行 exit n 之后得到的是 exit 的退出码
* 在函数内部用$1表示第一个参数，表达形式和位置参数一样
* if 后面的条件之后要加分号，而其他语句如 while 和 for 等都不需要