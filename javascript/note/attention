× javascript 严格遵循 EMCAScript 标准
× javascript 是基于对象和事件的，基于对象与面向对象不同，没有类的概念
  javascript 中的对象可以分为三种
    本地对象，如 Array，String 等包装的引用类型
    内置对象，即不用初始化直接可以用的对象，如 Math 和 Global
    宿主对象，针对操作系统和浏览器层次的对象，如 BOM（浏览器对象模型）和 DOM（文档对象模型）
    自定义对象，自定义对象显式初始化
    × 构造方法
        function Animal(name){
            this.name=name;
            this.getName=function(){return "I'm"+this.name;}
        }
        var animal=new Animal("tiger");
        × 构造方法的本质是函数
    × 原型方法
        function Animal(){}
        Animal.prototype.name="tiger";
        Animal.prototype.getName=function(){return "I'm"+this.name;}
        var animal=new Animal();
        × 初始化参数必须为空
        × 太繁琐，这种方法不仅将方法从函数中剥离，连属性也一起，少用
    × 构造方法与原型方法混合
        function Animal(name){
            this.name=name;
        }
        Animal.prototype.getName=function(){return "I'm"+this.name;}
        × 最常用的方式，属性在函数中，方法在原型中
    × 动态原型方法
        function Animal(name){
            this.name=name;
            if(typeof Animal._init=='undefined')
                Animal.prototype.getName=function(){return "I'm"+this.name;}
            Animal._init=='true';
        }
        × 在 javascript 中习惯上把私有变量名前面加上'_'，但实际上 javascript 没有私有变量这种定义
        × 动态原型就相当于把原型放在构造方法里面
× javascript 中虽然没有类的概念，但它可以通过原型链实现继承
    function Person(name,sex){
        this.name=name;
        this.sex=sex;
    }
    Person.prototype.getData=function(){
        return this.name+" "+this.sex;
    }
    function Student(name,sex,grade){
        this.name=name;
        this.sex=sex;
        this.grade=grade;
    }
    Student.prototype=new Person();    //  关键的一步，需要使用 new
    Student.prototype.getGrade=function(){
        return this.grade;
    }
    var stu=new Student('chen','male','junior');
* 构造函数与函数的区别在于构造函数必须含有 this 关键字，如果用 var 代替 this，则构造函数将失效

× java 中的常量在 javascript 中被称为直接量  
× 特殊符号
    & | ~ << >> >>>，分别是位与，位或，位非，位左移，有符号右移，无符号位右移
        在内存中负数开头为 1，如果使用有符号右移，则不会移动符号位，而无符号相反
    == 值等于，=== 值与类型都等于
        var num=3;
        document.write(num=="3");       //  true
        document.write(num==="3");      //  false
× 重复声明同一个变量时
    var x=5;
    var x;      //  5
× javascript 的选择结构和循环结构与 java 一样，除了 for in
    java 
        for(String s:str) ...
    javascript
        for(var s in str) ...
    ( s 读出来的是一个索引，而不是值)
        var arr=["hello","world"];
        for(var s in arr){
            document.write(s+"<br>);        //  0,1
            document.write(arr[s]+"<br>");  //  hello,world
        }
	( for in 不仅可以用来遍历数组，还可以用来遍历对象)
		var s1={name:'chen',sex:'male'};
		for(var i in s1)  alert(s1[i]);		//	chen,male
× with 语句，使得可以不重复指定 object 对象
    with（document）{
        wirte("hello world");
        write("hello China");
    }
× 可以使用 call 和 apply 来改变 this 的指向（apply 和 call 的用法是一样的，不过 apply 针对数组）
    var name='nihao';
    var user={name:'hello'};
    function get(){return this.name;}
    get()             //  nihao，相当于 window.get()
    get.call(user);   //  hello
× 交与或返回的值不是 boolean 型的值
    1||9    1
    0||9    9
    8&&6    6
    2&&6    2
  正因为如此，才可以使用 || 来实现兼容   
    event=event||window.event;
	
* function 中有 arguments , select 中有 options , form 中有 elements

* 经常犯错的地方,如下
	<select onblur='f(this)'> ... </select>		
	function f(e){
		e.remove(selectedIndex);							//	意图是删除选中的选项,但是错的很离谱
	}																				//	因为 selectedIndex 是 e 的属性,不是全局属性
	e.remove(n) 等同于 e.options.remove(n),但要注意,remove 并不是数组的方法,这个 options 是一个类数组的对象

* 有些标签的 width 和 height 是由 css 来控制的,如 ul,p 这些, <p style='width:200;height:200'>hello world</p>
