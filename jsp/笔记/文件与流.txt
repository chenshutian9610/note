* 流可大致分为三种：字节流，字符流，随机流
    InputStrean     字节输入流的抽象类      FileInputStream( file )
    OutputStream    字节输出流的抽象类      FileOutputStream( file [, append ])
    Reader          字符输入流的抽象类      FileReader( file )
    Writer          字符输出流的抽象类      FileWriter( file [, append ])
        read方法 为 int {取值为 大于或等于0的数 或 -1 }
        write方法 为 void 
    
    BufferedReader对象 以 Reader对象 为底层流，将 Reader对象 读出来的字符缓冲起来，按行读取，readLine {取值为 s 或 null}
    BufferedWriter对象 以 Writer对象 为底层流，按行写入，write（s,off,length）& newLine 

    随机流构造函数为 RandomAccessFile（file，mode），其中 mode 取值为 r 或 rw (String)，可以同时实现读写功能，同时拥有游标的功能
        游标功能以字节为单位，以开头位置为参照物
        seek（long）            //  移动到距离开头 long 个字节的位置
        getFilePointer          //  得到当前位置
        length                  //  文件大小
        读写功能
        readXxx         writeXxx        //  例如 readInt ，writeByte
        readUTF         writeUTF        //  读写 UTF格式 的字符串
        readLine        write
        
* 文件上传时表单的属性要加上 enctype="multipart/form-data" ，在子标记中要加入 File 类型
    <form action="" method=post enctype="multipart/form-data">
        <input type="File" name="f">
        <input type="hidden" value="我是隐藏的">
        <input type="hidden" value="我也是隐藏的" name="hide">
        <input type="submit" value="submit">
    </form>
  在 servlet 中的 request 使用 getInputStream 得到整个表单的流，
  再创建一个 输出流temp 输出到服务器端，因为文件中包含这所有表单的信息，
  所以需要剔除多余的信息才能得到 File ，File 的名称从第二行得到
    
    ------WebKitFormBoundarytJhAsJWXtaijDYOc                    //  linux 和 win 的分割显示是不一样的
    Content-Disposition: form-data; name="f"; filename="hello"  //  File对象 的真实名字在这里
    Content-Type: application/octet-stream
  
    hello world         //  文本内容
    hello china         //  文本内容
  
    ------WebKitFormBoundarytJhAsJWXtaijDYOc
    Content-Disposition: form-data; name="hide"
  
    我也是隐藏的          //  注意，这是第二个 hidden 的值
    ------WebKitFormBoundarytJhAsJWXtaijDYOc--
    
    输入流只包含带有名字的对象，没有赋予名字的对象一般只是为了在客户端显示，上面没有名字的 hidden 没有意义
    输入输出流按 input 的顺序依次输出表单的信息，要得到 File 的数据时要根据实际情况把前几行和后几行的无用信息剔除，
    一般使用 RandomAccessFile ，因为可以定位，但是有一点要注意，必须要注意，
    servlet 一般处理完数据之后会使用转发或重定向到一个 JSP ，但是文件输入输出还在内存进行的，如下
    
    ......              //  进行输出的代码
    in.close();
    out.close();
    response.sendRedirect("text.jsp");

    这样是错误的，因为输入输出进行时是要在内存中的，当重定向的时候，内存的工作就会停止，如果上传的文件是文本这种小的东西可以完成工作，
    但如果是 mp3 jpg 这种的就只能看到一个 0 字节或几百字节的文件，不完全，在关闭 out 之前要使用 flush 方法，刷新内存

    
    ......
    in.close();
    out.flush();							//  需要养成这个习惯
    out.close();
    response.sendRedirect("text.jsp");          

* 文件下载
  需要 response.setHeader("content-disposition","attachment;filename="+filename) 来通知客户可以下载，
  然后创建 InputStream 指向要输出的文件，再通过 response.getOutputStream() 输出给用户
  attachment 为下载，如果没有这个字段则 out 指向浏览器，即在线打开而不下载
