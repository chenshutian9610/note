* 默认设置 root账号 ，无密码
  需要使用 mysqld 启动数据库，然后才可以使用 mysql -u root 登陆
  命令行使用语法：
    使用某一个数据库时使用 use + 数据库名，
    在创建一个数据库或表或表中元素时，在最后加上 character set gb2312 可以识别中文，    //  utf-8 为 utf8
    T-SQL语句结束时需要加上 ; 符号，
    可以把要操作的 T-SQL语句 编写成一个文件（.sql)，然后使用 source + 文件位置 来执行操作

* jdbc
    java 连接数据库需要使用相应的 jdbc驱动 ，mysql 的驱动下载地址为 http://www.mysql.com/products/connector/ ，选择 Connector/J ，
    将下载的压缩包解压后把其中的 mysql-connector-java-xxxxx-bin.jar 复制到 java 的扩展目录中
    
    加载驱动
    try{
        Class.forName("com.mysql.jdbc.Driver");     //  Class 是一个类，开头大写，加载了 Driver 的静态构造器完成驱动注册
    }catch(Exception e){}

    建立连接
    使用 DriverManager类 的类方法
    Connection getConnection(uri,user,password) throws SQLException
    Connection getConnection(uri) throws SQLException
    mysql 的 jdbc 端口号默认为 3306 
    uri格式                                         //  如果是连接本机的数据库可以不加端口号
        jdbc:mysql://IP:3306/数据库名            
        jdbc:mysql://IP:3306/数据库名?user=xxx&password=xxx&useSSL=false        //  useSSL 指定 mysql 是否使用安全机制，一般为false
    String uri="jdbc:mysql://localhost/mydatabase?user=root&password=&useSSL=false";
    如果设置了数据库的编码格式，则 uri 还需要加上 characterEncoding=gb2312 
    
    查询
    try{
        Statement sql=con.createStatement();                    //  可以通过加入参数实现游标和数据库实时更新的功能
        ResultSet rx=sql.executeQuery("select*from info");
        ResultSetMetaData metadata=rs.getMetaData();            //  得到 rs 的元数据，即列信息
        int columnCount=metadata.getColumnCount();              //  getColumnCount 得到列数量
        String[]columnNames=new Stirng[columnCount];
        for(int i=0;i<columnCount;i++){
            columnNames[i]=metadata.getColumnName(i+1);         //  getColumnName（i） 得到 第i列 的列名，i 从1开始
        }
        ......
        while(rs.next()){                                       //  next，不是 hasNext
            String one=rs.getString(1);                         //  通过 getXxx（i） 得到 第i列 的特定格式数据
            char two=rs.getChar(2);
            int three=rs.getInt(3);
            ......
        }
        con.close();
    }catch(Exception e){}
    
    createStatement（type,concurrency)，type 和 concurrency 都是枚举类型
        ResultSet.TYPE_FORWORD_ONLY             //  游标只能向下
        ResultSet.TYPE_SCROLL_INSENSITIVE       //  游标可自由移动，不能随数据库实时更新
        ResultSet.TYPE_SCROLL_SENSITIVE         //  游标可自由移动，随数据库实时更新
        ResultSet.CONCUR_READ_ONLY              //  只读
        ResultSet.CONCUR_UPDATABLE              //  可更新数据库
        可使用的方法为
        previous  beforeFirst  afterLast  first  last  isAfterLast  isBeforeFirst  isFirst  isLast  
        getRow          //  得到当前行号
        absolute(i)     //  移到 第i行
    简而言之，type 和 concurrency 的功能就是，数据库能否更新结果集，结果集能否更新数据库
    通过上面的格式连接数据库，每次发送 sql语句 时，数据库的 sql解释器 就要对语句进行解析，然后再执行，
    所以当操作频繁时数据库的负担就会很重，运行速度就会低下，可以使用预处理方式，即把解析操作放在当前服务器中执行
    PreparedStatement pre=con.prepareStatement(sql);            //  PreparedStatement类 中含有 d ，方法中没有
    ResultSet executeQuery()
    boolean execute()
    int executeUpdate()
    预处理可以在 sql语句 中使用 通配符？ ，然后使用 setXxx（i,value） 设置 第i个 通配符为 value
    PreparedStatement pre=con.prepareStatement("select*from info where id=?");  //  不能用通配符表示表名
    pre.setInt(1,33);
    
    操作数据库中的数据
        executeUpdate（sql）
        结果集操作，要求数据库拥有主键
            首先需要一个可以滚动的并且敏感的结果集
 	!!!!	Statement sql=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);	//	ResultSet.xxx
            ResultSet rs=sql.executeQuery();
            更新记录 
            rs.absolute(i);
            rs.updateXxx(i,value); /rs.updateXxx(columnName,value);       //  比如: rs.updateString(1,"chen");
            rs.updateRow();
            插入数据
            rs.moveToInsertRow();                                         //  创建一个新行，插入后是由数据库排序的
            rs.updateXxx(i,value); /rs.updateXxx(columnName,value);
            rs.insertRow();
    	× 定位 —— 修改 —— 上传
    
    事务处理
        java 默认是提交一条 sql语句 就执行一次，可以通过 con.setAutoCommit（false） 设置成不自动提交，
        最后通过 commit 一次性提交 sql语句块 ，当发生异常时通过 rollback 撤销操作（rollback 会引发异常）
        try{
            con.setAutoCommit(false);       //  事务处理必须要有的语句
            sql.execute("insert info values('123','chen','male')");
            sql.execute("update info set id='22' where id='123'");
            con.commit();                   //  处理之后提交
            con.close();
        }catch(SQLException e){
            try{
                con.rollback();             //  注意使用 rollback 一定要有 try-catch
            }catch(SQLException exp){}
        }

    分页显示
        总页数=(m%n)==0?m/n:(m/n+1);        //  m 为数据量，n 为一次只能显示的最大数据量

  
